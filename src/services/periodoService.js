/**
 * Servicio de Per√≠odos Acad√©micos
 * SIRHA - Sistema de Reasignaci√≥n de Horarios Acad√©micos
 * 
 * Endpoints:
 * - GET /api/periodos - Listar todos los per√≠odos
 * - GET /api/periodos/{id} - Obtener per√≠odo por ID
 * - GET /api/periodos/activo - Obtener per√≠odo acad√©mico activo
 * - POST /api/periodos - Crear nuevo per√≠odo
 * - PUT /api/periodos/{id} - Actualizar per√≠odo
 * - DELETE /api/periodos/{id} - Eliminar per√≠odo
 */

import httpClient from './httpClient';
import API_CONFIG from '../config/apiConfig';

const periodoService = {
  /**
   * Obtener todos los per√≠odos acad√©micos
   * @returns {Promise<Array>} Lista de per√≠odos
   */
  async getAllPeriodos() {
    try {
      console.log('üìÖ Obteniendo todos los per√≠odos acad√©micos...');
      
      const response = await httpClient.get(API_CONFIG.ENDPOINTS.PERIODOS.BASE);
      
      console.log(`‚úÖ Se obtuvieron ${response.data.length} per√≠odos`);
      return response.data;
    } catch (error) {
      console.error('‚ùå Error al obtener per√≠odos:', error.response?.data || error.message);
      
      throw {
        message: error.response?.data?.message || 'Error al cargar los per√≠odos acad√©micos',
        status: error.response?.status,
      };
    }
  },

  /**
   * Obtener per√≠odo por ID
   * @param {string} periodoId - ID del per√≠odo
   * @returns {Promise<Object>} Datos del per√≠odo
   */
  async getPeriodoById(periodoId) {
    try {
      if (!periodoId) {
        throw new Error('ID de per√≠odo es obligatorio');
      }

      console.log(`üìÖ Obteniendo per√≠odo con ID: ${periodoId}`);
      
      const response = await httpClient.get(
        API_CONFIG.ENDPOINTS.PERIODOS.BY_ID(periodoId)
      );
      
      console.log('‚úÖ Per√≠odo obtenido exitosamente');
      return response.data;
    } catch (error) {
      console.error('‚ùå Error al obtener per√≠odo:', error.response?.data || error.message);
      
      throw {
        message: error.response?.data?.message || 'Error al cargar el per√≠odo',
        status: error.response?.status,
      };
    }
  },

  /**
   * Obtener per√≠odo acad√©mico activo
   * @returns {Promise<Object>} Per√≠odo activo
   */
  async getPeriodoActivo() {
    try {
      console.log('üìÖ Obteniendo per√≠odo acad√©mico activo...');
      
      const response = await httpClient.get(API_CONFIG.ENDPOINTS.PERIODOS.ACTIVO);
      
      console.log('‚úÖ Per√≠odo activo obtenido exitosamente');
      return response.data;
    } catch (error) {
      console.error('‚ùå Error al obtener per√≠odo activo:', error.response?.data || error.message);
      
      throw {
        message: error.response?.data?.message || 'Error al cargar el per√≠odo activo',
        status: error.response?.status,
      };
    }
  },

  /**
   * Crear nuevo per√≠odo acad√©mico
   * @param {Object} periodoData - Datos del per√≠odo
   * @param {string} periodoData.nombre - Nombre del per√≠odo (ej: "2024-1")
   * @param {string} periodoData.fechaInicio - Fecha de inicio (ISO 8601)
   * @param {string} periodoData.fechaFin - Fecha de fin (ISO 8601)
   * @param {boolean} [periodoData.activo] - Si es el per√≠odo activo (opcional)
   * @returns {Promise<Object>} Per√≠odo creado
   */
  async createPeriodo(periodoData) {
    try {
      if (!periodoData.nombre || !periodoData.fechaInicio || !periodoData.fechaFin) {
        throw new Error('Todos los campos obligatorios deben estar completos');
      }

      const payload = {
        nombre: periodoData.nombre,
        fechaInicio: periodoData.fechaInicio,
        fechaFin: periodoData.fechaFin,
        activo: periodoData.activo !== undefined ? periodoData.activo : null,
      };

      console.log('üìù Creando per√≠odo acad√©mico:', payload);
      
      const response = await httpClient.post(
        API_CONFIG.ENDPOINTS.PERIODOS.BASE,
        payload
      );
      
      console.log('‚úÖ Per√≠odo creado exitosamente');
      return response.data;
    } catch (error) {
      console.error('‚ùå Error al crear per√≠odo:', error.response?.data || error.message);
      
      throw {
        message: error.response?.data?.message || 'Error al crear el per√≠odo acad√©mico',
        errorCode: error.response?.data?.errorCode,
        validationErrors: error.response?.data?.validationErrors,
        status: error.response?.status,
      };
    }
  },

  /**
   * Actualizar per√≠odo existente
   * @param {string} periodoId - ID del per√≠odo
   * @param {Object} periodoData - Datos actualizados
   * @returns {Promise<Object>} Per√≠odo actualizado
   */
  async updatePeriodo(periodoId, periodoData) {
    try {
      if (!periodoId) {
        throw new Error('ID de per√≠odo es obligatorio');
      }

      const payload = {
        nombre: periodoData.nombre || null,
        fechaInicio: periodoData.fechaInicio || null,
        fechaFin: periodoData.fechaFin || null,
        activo: periodoData.activo !== undefined ? periodoData.activo : null,
      };

      console.log(`üìù Actualizando per√≠odo ${periodoId}:`, payload);
      
      const response = await httpClient.put(
        API_CONFIG.ENDPOINTS.PERIODOS.BY_ID(periodoId),
        payload
      );
      
      console.log('‚úÖ Per√≠odo actualizado exitosamente');
      return response.data;
    } catch (error) {
      console.error('‚ùå Error al actualizar per√≠odo:', error.response?.data || error.message);
      
      throw {
        message: error.response?.data?.message || 'Error al actualizar el per√≠odo',
        errorCode: error.response?.data?.errorCode,
        validationErrors: error.response?.data?.validationErrors,
        status: error.response?.status,
      };
    }
  },

  /**
   * Eliminar per√≠odo
   * @param {string} periodoId - ID del per√≠odo
   * @returns {Promise<void>}
   */
  async deletePeriodo(periodoId) {
    try {
      if (!periodoId) {
        throw new Error('ID de per√≠odo es obligatorio');
      }

      console.log(`üóëÔ∏è Eliminando per√≠odo: ${periodoId}`);
      
      await httpClient.delete(API_CONFIG.ENDPOINTS.PERIODOS.BY_ID(periodoId));
      
      console.log('‚úÖ Per√≠odo eliminado exitosamente');
    } catch (error) {
      console.error('‚ùå Error al eliminar per√≠odo:', error.response?.data || error.message);
      
      throw {
        message: error.response?.data?.message || 'Error al eliminar el per√≠odo',
        status: error.response?.status,
      };
    }
  },
};

export default periodoService;
